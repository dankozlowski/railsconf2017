# Deomain driven design

Beautiful systems
* What are the defficult design decisions that are likely to change?
  * Within the business groups that user them!

How do we get out of the world on the monolith?
  * Microservices sound hard!
  * How much should we plan to extract?
  * What if my level of extraction is too high or too low?
  * IF ONLY THERE WEREW A WAY TO VISUALIZE THIS STUFF

"INtroducing domain-driven design"
  * Activity from DDD: A context map.
  * Refactoring patterns we can use to incrementall refacot system

Ubiquitous language: set of shared conecpts terms, and efinitions between stakeholdres and technical staff
  * Develop a glossary: nouns (concepts), verbs (actions) with everyone in the same room
  * Rename concepts in code to follow the new glossary

Visualize your system
* ERD: railsroady or rails-ERD

Supporting domains: areas of business that make the core domain happen (reporting, finances, etc)

Boundaries
  Classes
  Modeules
  Gems
  Enginers
  App
  APIs

Bounded contexts allow us to have overloaded terms that are seprated by context.
Draw out application with upstream and downstream indications
Break application into domain modules

Aggregate roots:
  * Helps avoid the AR GOD OBJECT
  * Only expose object graph oh related entittes beneath them

Note: a fair emount of this talk is design-specific for this application.

Advanced topics:
* Sharing entties between contexts
  * Shared kernel - namespace shared models ina  common module or namespace or gem!
    * user -> common::user
  * model that needs to exist in two domains?
    * anti-corrouption layer - adatper that maps an outside concentp in to the current domain

This talk should have been called 'how to write your rails app like a java project'

Resources:
Gem: Whisper

